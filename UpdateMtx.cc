///////////////////////////////////////////////////////////////////////////
// Пересчёт матрицы
//
// Возвращает 1, если получен конечный результат;
//           -1, если обнаружена ошибка в вычислениях;
//            0, если простой прогонкой получить результат не удаётся
//

int UpdateMtx (void)
	{
	unsigned int i, j, p, n = 0;

	while ((CheckRes () == 0) && (n < MAX_ITER))
		{
		// Счётчик итераций для определения момента завершения процесса
		n++;

		// Горизонтальные линии
		FOR_I
			{
			// Здесь происходит удаление бит, неудовлетворяющих условиям задачи.
			// Для этого в числе p, заданном изначально значением 0x1FF,
			// «выкалываются» биты, уже встречающиеся в данной строке (далее -
			// столбце и квадрате). Причём, для этого используются только
			// вычисленные ячейки (is_pow_2 == 1)
			// Затем полученное число конкатенируется с каждой ячейкой, где
			// вычисление ещё не было завершено (is_pow_2 == 0)
			p = SDS_FULL;

			FOR_J
				{
				if (IS_MIJ_POW2 == 1)
					{
					p &= (~Mtx[i][j]);	// Mij = 010000000; p = 111111111; [&=~] = 101111111
					}
				}

			FOR_J
				{
				if (IS_MIJ_POW2 == 0)
					{
					Mtx[i][j] &= p;		// Mij = 010010001; p = 101111111; Mij' = 000010001
					}
				}
			}

		// Вертикальные линии
		FOR_J
			{
			p = SDS_FULL;

			FOR_I
				{
				if (IS_MIJ_POW2 == 1)
					{
					p &= (~Mtx[i][j]);
					}
				}

			FOR_I
				{
				if (IS_MIJ_POW2 == 0)
					{
					Mtx[i][j] &= p;
					}
				}
			}

		// Квадраты
		FOR_I
			{
			p = SDS_FULL;

			FOR_J
				{
				if (IS_MSIJ_POW2 == 1)
					{
					p &= (~Mtx[SQI][SQJ]);
					}
				}

			FOR_J
				{
				if (IS_MSIJ_POW2 == 0)
					{
					Mtx[SQI][SQJ] &= p;
					}
				}
			}
		}

	// Результат прогонки
	if (CheckErr ())
		{
		return -1;		// Прогонка дала ошибочный результат (имеются повторяющиеся значения)
		}
	else if (n < MAX_ITER)
		{
		return 1;		// Прогонка не дала конечного результата
		}
	else
		{
		return 0;		// Получен ответ
		}
	}
